{"version":3,"sources":["../../../src/@ionic-native/plugins/badge/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAGxE;;;;;;;;;;;;;;;;;;;GAmBG;AASH,IAAa,KAAK;IAAS,yBAAiB;IAA5C;;IA4DA,CAAC;IA1DC;;;OAGG;IAEH,qBAAK,GAAL,cAA4B,MAAM,CAAC,CAAC,CAAC;IAErC;;;;OAIG;IAEH,mBAAG,GAAH,UAAI,WAAmB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElD;;;OAGG;IAEH,mBAAG,GAAH,cAAsB,MAAM,CAAC,CAAC,CAAC;IAE/B;;;;OAIG;IAEH,wBAAQ,GAAR,UAAS,UAAkB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtD;;;;OAIG;IAEH,wBAAQ,GAAR,UAAS,UAAkB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtD;;;OAGG;IAEH,6BAAa,GAAb,cAAgC,MAAM,CAAC,CAAC,CAAC;IAEzC;;;OAGG;IAEH,kCAAkB,GAAlB,cAAqC,MAAM,CAAC,CAAC,CAAC;IAQhD,YAAC;AAAD,CA5DA,AA4DC,CA5D0B,iBAAiB,GA4D3C;AANM,gBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,oBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AApDA;IADC,OAAO,EAAE;;;;kCAC2B;AAQrC;IADC,OAAO,EAAE;;;;gCACwC;AAOlD;IADC,OAAO,EAAE;;;;gCACqB;AAQ/B;IADC,OAAO,EAAE;;;;qCAC4C;AAQtD;IADC,OAAO,EAAE;;;;qCAC4C;AAOtD;IADC,OAAO,EAAE;;;;0CAC+B;AAOzC;IADC,OAAO,EAAE;;;;+CACoC;AApDnC,KAAK;IARjB,MAAM,CAAC;QACN,UAAU,EAAE,OAAO;QACnB,MAAM,EAAE,sBAAsB;QAC9B,SAAS,EAAE,oCAAoC;QAC/C,IAAI,EAAE,gDAAgD;QACtD,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACpD,CAAC;GAEW,KAAK,CA4DjB;SA5DY,KAAK","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n\n/**\n * @name Badge\n * @description\n * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.\n *\n * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).\n *\n * @usage\n * ```typescript\n * import { Badge } from '@ionic-native/badge';\n *\n * constructor(private badge: Badge) { }\n *\n * ...\n *\n * this.badge.set(10);\n * this.badge.increase(1);\n * this.badge.clear();\n * ```\n */\n@Plugin({\n  pluginName: 'Badge',\n  plugin: 'cordova-plugin-badge',\n  pluginRef: 'cordova.plugins.notification.badge',\n  repo: 'https://github.com/katzer/cordova-plugin-badge',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class Badge extends IonicNativePlugin {\n\n  /**\n   * Clear the badge of the app icon.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  clear(): Promise<boolean> { return; }\n\n  /**\n   * Set the badge of the app icon.\n   * @param {number} badgeNumber  The new badge number.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  set(badgeNumber: number): Promise<any> { return; }\n\n  /**\n   * Get the badge of the app icon.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  get(): Promise<any> { return; }\n\n  /**\n   * Increase the badge number.\n   * @param {number} increaseBy  Count to add to the current badge number\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  increase(increaseBy: number): Promise<any> { return; }\n\n  /**\n   * Decrease the badge number.\n   * @param {number} decreaseBy  Count to subtract from the current badge number\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  decrease(decreaseBy: number): Promise<any> { return; }\n\n  /**\n   * Determine if the app has permission to show badges.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  hasPermission(): Promise<any> { return; }\n\n  /**\n   * Register permission to set badge notifications\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  registerPermission(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}